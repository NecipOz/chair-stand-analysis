# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YBkNmNYo770Oe9KaV18xV-9txDlfFSTF
"""

import streamlit as st
import cv2
import mediapipe as mp
import imageio
import matplotlib.pyplot as plt
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from scipy.signal import argrelextrema
from scipy import signal
import matplotlib.ticker as mtick
import pickle

def pose_est(vid, num_frames2):

  mpPose = mp.solutions.pose
  pose = mpPose.Pose()
  mpDraw = mp.solutions.drawing_utils # For drawing keypoints
  points = mpPose.PoseLandmark # Landmarks
  data = []
  for p in points:
          x = str(p)[13:]
          data.append(x + "_x")
          data.append(x + "_y")
          data.append(x + "_z")
          data.append(x + "_vis")
  data = pd.DataFrame(columns = data) # Empty dataset

  count = 0

  img_c = []  # list of images with markers

  img_b = []  # list of blackie images

  for num in range(0,num_frames2):

          temp = []

          img = vid.get_data(num)

          imageWidth, imageHeight = img.shape[:2]

          imgRGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

          blackie = np.zeros(img.shape) # Blank image

          results = pose.process(imgRGB)

          if results.pose_landmarks:

                  mpDraw.draw_landmarks(img, results.pose_landmarks, mpPose.POSE_CONNECTIONS) #draw landmarks on image

                  mpDraw.draw_landmarks(blackie, results.pose_landmarks, mpPose.POSE_CONNECTIONS) # draw landmarks on blackie

                  landmarks = results.pose_landmarks.landmark

                  for i,j in zip(points,landmarks):

                          temp = temp + [j.x, j.y, j.z, j.visibility]

                  data.loc[count] = temp

                  count +=1

          img_c.append(img)

          img_b.append(blackie)


          #cv2_imshow(img)

          #cv2_imshow(blackie)

          cv2.waitKey(100)

  data.to_csv("datasetfull.csv") # save the data as a csv file

  df_vid = pd.read_csv("datasetfull.csv")

  df_vid.rename(columns={'Unnamed: 0': 'index_of_frame'}, inplace=True)

  return df_vid, img_c, img_b



def angle_finder(common_x, common_y, point1_x, point1_y, point2_x, point2_y):
  a_x = common_x - point1_x
  a_y = common_y - point1_y
  b_x = point2_x - common_x
  b_y = point2_y - common_y
  norm1 = np.sqrt(a_x**2 + a_y**2)
  norm2 = np.sqrt(b_x**2 + b_y**2)
  angle_f = np.arccos(((a_x * b_x) + (a_y * b_y)) / (norm1 * norm2))
  angle_f = np.degrees(angle_f)
  return angle_f

def angle_array_creator(df_f, main, top, bottom):

  right_main_vis = "RIGHT_" + main + "_vis"
  left_main_vis = "LEFT_" + main + "_vis"
  right_main_x = "RIGHT_" + main + "_x"
  left_main_x = "LEFT_" + main + "_x"
  right_main_y = "RIGHT_" + main + "_y"
  left_main_y = "LEFT_" + main + "_y"
  right_top_x = "RIGHT_" + top + "_x"
  left_top_x = "LEFT_" + top + "_x"
  right_top_y = "RIGHT_" + top + "_y"
  left_top_y = "LEFT_" + top + "_y"
  right_bottom_x = "RIGHT_" + bottom + "_x"
  left_bottom_x = "LEFT_" + bottom + "_x"
  right_bottom_y = "RIGHT_" + bottom + "_y"
  left_bottom_y = "LEFT_" + bottom + "_y"


  if df_f[right_main_vis].mean() > df_f[left_main_vis].mean():
    angle_main_array = np.array(angle_finder(df_f[right_main_x],
                                          df_f[right_main_y],
                                          df_f[right_top_x],
                                          df_f[right_top_y],
                                          df_f[right_bottom_x],
                                          df_f[right_bottom_y]))
  else:
    angle_main_array = np.array(angle_finder(df_f[left_main_x],
                                          df_f[left_main_y],
                                          df_f[left_top_x],
                                          df_f[left_top_y],
                                          df_f[left_bottom_x],
                                          df_f[left_bottom_y]))
  return angle_main_array

def index_finder(angle_temp, num_frames4):

  #get local extremums
  angle_index = argrelextrema(angle_temp, np.less)[0].tolist()

  angle_start = []

  while len(angle_index ) != 0:
    min_temp = angle_temp[angle_index].argmin()

    #Remove local extremums that are not close to zero.
    if angle_temp[angle_index[min_temp]] > 50:
      angle_index.remove(angle_index[min_temp])
    else:
      l_min = angle_index[min_temp] - 5
      if l_min < 0:
        l_min = 0

      u_min = angle_index[min_temp] + 5
      if u_min > num_frames4:
        u_min = num_frames4

      control = True

      # Remove instant local extremums that takes very small values but then
      # take big values for about 3 frames
      for i in range(l_min, u_min):
        if np.abs(angle_temp[angle_index[min_temp]]-angle_temp[i]) > 70:
          control = False

      if control == False:
        angle_index.remove(angle_index[min_temp])
      else:
        angle_start.append(angle_index[min_temp])
        remove_list = []

        # Remove the local extremums that are very close to exact locals
        for j in angle_index:
          if np.abs(angle_index[min_temp]-j) < (num_frames4/15):
            remove_list.append(j)
        for k in remove_list:
          angle_index.remove(k)

  angle_start.sort()

  # angle_start list is the exact locals of angle_temp

  # By using these locals start and end frames of turns is found.

  start_index = []

  # Difference between locals was calculated.
  diff1 = angle_start[1] - angle_start[0]
  diff2 = angle_start[2] - angle_start[1]
  diff3 = angle_start[3] - angle_start[2]
  diff4 = angle_start[4] - angle_start[3]

  # turn_l's are the half of the turns.

  turn_l1 = angle_start[1] - angle_start[0] - (diff1 + diff2) // 4
  turn_l2 = (diff1 + diff2) // 4
  turn_l3 = (diff2 + diff3) // 4
  turn_l4 = (diff3 + diff4) // 4
  turn_l5 = angle_start[4]- angle_start[3] - (diff3 + diff4) // 4

  turn_l = [turn_l1, turn_l2, turn_l3, turn_l4, turn_l5]

  for i in range(5):
    start_index.append((angle_start[i]- turn_l[i], angle_start[i] + turn_l[i]))

  return start_index

def create_df_angle(angle_temp2, index_list):
    # create df_angle that composed of angles of turns
  df_angle_f = pd.DataFrame()

  for i in range(5):
    name = "S" + str(i+1)
    df_angle_f[name] = signal.resample(angle_temp2[index_list[i][0]:index_list[i][1]], 42)

  #get mean and std of turns
  df_angle_f["mean"] = np.mean(df_angle_f, axis=1)
  df_angle_f["std"] = np.std(df_angle_f, axis=1)

  return df_angle_f

def angle_plot(index_list, df_angle, vid1, plot_name):

  #plot angles
  fig, ax = plt.subplots(figsize=(14,8))
  color_list = ["c--", "b--", "y--", "m--", "g--"]
  legend_ = ["S1", "S2", "S3", "S4", "S5"]
  for i in range(5):
    name = "S" + str(i+1)
    ax.plot(range(len(df_angle[name])),df_angle[name],color_list[i], alpha=0.3)

  ax.legend(legend_)

  #plot mean and std
  ax.plot(range(len(df_angle["mean"])),df_angle["mean"],"r", linewidth=2)
  ax.fill_between(range(len(df_angle["mean"])),
                  df_angle["mean"] - df_angle["std"],
                  df_angle["mean"] + df_angle["std"],
                  color='r', alpha=0.1)

  ax.set_title(plot_name, fontsize=13, color= 'blue', fontweight='bold')
  plt.gca().xaxis.set_major_formatter(mtick.PercentFormatter(xmax=42))
  plt.xlim(0,42)
  plt.ylim(-50,df_angle[["S1"]].max().max()+7)
  plt.axhline(0, color="black")
  for i in range(5):
    newax = fig.add_axes([0.08+i*0.16,0.135,0.15,0.15], anchor='NE', zorder=1)
    image = vid1.get_data(index_list[1][0]+5+i*int((index_list[1][1]-index_list[1][0])/5))
    newax.imshow(image)
    newax.axis('off')
  st.pyplot(fig)

def center_of_mass(df, gender = "female"):

  r_foot_x = df["RIGHT_FOOT_INDEX_x"] *0.50 + df["RIGHT_HEEL_x"] * 0.50
  r_foot_y = df["RIGHT_FOOT_INDEX_y"] * 0.50+ df["RIGHT_HEEL_y"] * 0.50
  l_foot_x = df["LEFT_FOOT_INDEX_x"] *0.50 + df["LEFT_HEEL_x"] * 0.50
  l_foot_y = df["LEFT_FOOT_INDEX_y"] * 0.50 + df["LEFT_HEEL_y"] *0.50
  r_shank_x = df["RIGHT_KNEE_x"] * 0.581 + df["RIGHT_ANKLE_x"] * 0.419
  r_shank_y = df["RIGHT_KNEE_y"] *0.581 + df["RIGHT_ANKLE_y"] * 0.419
  l_shank_x = df["LEFT_KNEE_x"] * 0.581 + df["RIGHT_ANKLE_x"] * 0.419
  l_shank_y = df["LEFT_KNEE_y"] *0.581 + df["RIGHT_ANKLE_y"] * 0.419
  r_thigh_x = df["RIGHT_KNEE_x"] * 0.428 + df["RIGHT_HIP_x"] * 0.572
  r_thigh_y = df["RIGHT_KNEE_y"] *0.428 + df["RIGHT_HIP_y"] * 0.572
  l_thigh_x = df["LEFT_KNEE_x"] * 0.428 + df["LEFT_HIP_x"] * 0.572
  l_thigh_y = df["LEFT_KNEE_y"] *0.428 + df["LEFT_HIP_y"] * 0.572
  r_up_arm_x = df["RIGHT_ELBOW_x"] * 0.458 + df["RIGHT_SHOULDER_x"] * 0.542
  r_up_arm_y = df["RIGHT_ELBOW_y"] * 0.458 + df["RIGHT_SHOULDER_y"] * 0.542
  l_up_arm_x = df["LEFT_ELBOW_x"] * 0.458 + df["LEFT_SHOULDER_x"] * 0.542
  l_up_arm_y = df["LEFT_ELBOW_y"] * 0.458 + df["LEFT_SHOULDER_y"] * 0.542
  r_forearm_x = df["RIGHT_ELBOW_x"] * 0.566 + df["RIGHT_WRIST_x"] * 0.434
  r_forearm_y = df["RIGHT_ELBOW_y"] * 0.566 + df["RIGHT_WRIST_y"] * 0.434
  l_forearm_x = df["LEFT_ELBOW_x"] * 0.566 + df["LEFT_WRIST_x"] * 0.434
  l_forearm_y = df["LEFT_ELBOW_y"] * 0.566 + df["LEFT_WRIST_y"] * 0.434
  r_hand_x = (df["RIGHT_PINKY_x"] + df["RIGHT_INDEX_x"]) * 0.468 + df["RIGHT_WRIST_x"] * 0.532
  r_hand_y = (df["RIGHT_PINKY_y"] + df["RIGHT_INDEX_y"]) * 0.468 + df["RIGHT_WRIST_y"] * 0.532
  l_hand_x = (df["LEFT_PINKY_x"] + df["LEFT_INDEX_x"]) * 0.468 + df["LEFT_WRIST_x"] * 0.532
  l_hand_y = (df["LEFT_PINKY_y"] + df["LEFT_INDEX_y"]) * 0.468 + df["LEFT_WRIST_y"] * 0.532
  r_trunk_x = df["RIGHT_HIP_x"] * 0.5 + df["RIGHT_SHOULDER_x"] * 0.5
  r_trunk_y = df["RIGHT_HIP_y"] * 0.5 + df["RIGHT_SHOULDER_y"] * 0.5
  l_trunk_x = df["LEFT_HIP_x"] * 0.5 + df["LEFT_SHOULDER_x"] * 0.5
  l_trunk_y = df["LEFT_HIP_y"] * 0.5 + df["LEFT_SHOULDER_y"] * 0.5
  mid_trunk_x = (l_trunk_x + r_trunk_x)/2
  mid_trunk_y = (l_trunk_y + r_trunk_y)/2
  head_d_x = (df["RIGHT_EYE_x"] + df["LEFT_EYE_x"])/2
  head_p_x = (df["MOUTH_RIGHT_x"] + df["MOUTH_LEFT_x"])/2
  head_x = head_d_x * 0.55 + head_p_x * 0.45
  head_d_y = (df["RIGHT_EYE_y"] + df["LEFT_EYE_y"])/2
  head_p_y = (df["MOUTH_RIGHT_y"] + df["MOUTH_LEFT_y"])/2
  head_y = head_d_y * 0.55 + head_p_y * 0.45

  if gender == "female":
    center_x = (r_foot_x * 1.33 + l_foot_x * 1.33 +  r_shank_x * 5.35 +\
     l_shank_x * 5.35 + r_thigh_x * 11.75 + l_thigh_x * 11.75 +\
      r_up_arm_x * 2.90 + l_up_arm_x * 2.90 + r_forearm_x * 1.57 +\
       l_forearm_x * 1.57 + r_hand_x * 0.5 + l_hand_x * 0.5 + \
       mid_trunk_x * 45 + head_x * 8.2) / 100

    center_y = (r_foot_y * 1.33 + l_foot_y * 1.33 +  r_shank_y * 5.35 +\
     l_shank_y * 5.35 + r_thigh_y * 11.75 + l_thigh_y * 11.75 +\
      r_up_arm_y * 2.90 + l_up_arm_y * 2.90 + r_forearm_y * 1.57 +\
       l_forearm_y * 1.57 + r_hand_y * 0.5 + l_hand_y * 0.5 + \
       mid_trunk_y * 45 + head_y * 8.2) / 100
  else:
      center_x = (r_foot_x * 1.43 + l_foot_x * 1.43 +  r_shank_x * 4.75 +\
      l_shank_x * 4.75 + r_thigh_x * 10.50 + l_thigh_x * 10.50 +\
        r_up_arm_x * 3.25 + l_up_arm_x * 3.25 + r_forearm_x * 1.87 +\
        l_forearm_x * 1.87 + r_hand_x * 0.65 + l_hand_x * 0.65 + \
        mid_trunk_x * 46.84 + head_x * 8.96) / 100

      center_y = (r_foot_y * 1.43 + l_foot_y * 1.43 +  r_shank_y * 4.75 +\
      l_shank_y * 4.75 + r_thigh_y * 10.50 + l_thigh_y * 10.50 +\
        r_up_arm_y * 3.25 + l_up_arm_y * 3.25 + r_forearm_y * 1.87 +\
        l_forearm_y * 1.87 + r_hand_y * 0.65 + l_hand_y * 0.65 + \
        mid_trunk_y * 46.84 + head_y * 8.96) / 100

  return center_x, center_y

def plot_center_of_mass(c_x, c_y, index_c):

  df_com_x = pd.DataFrame()

  for i in range(5):
    name = "S" + str(i+1)
    df_com_x[name] = signal.resample(c_x[index_c[i][0]:index_c[i][1]], 42)

  #get mean and std of turns
  df_com_x["mean"] = np.mean(df_com_x, axis=1)
  df_com_x["std"] = np.std(df_com_x, axis=1)

  df_com_y = pd.DataFrame()

  for i in range(5):
    name = "S" + str(i+1)
    df_com_y[name] = signal.resample(c_y[index_c[i][0]:index_c[i][1]], 42)

  #get mean and std of turns
  df_com_y["mean"] = np.mean(df_com_y, axis=1)
  df_com_y["std"] = np.std(df_com_y, axis=1)

  fig, ax = plt.subplots(figsize=(10,3))
  color_list = ["c--", "b--", "y--", "m--", "g--"]
  legend_ = ["S1", "S2", "S3", "S4", "S5"]

  for i in range(5):
    name = "S" + str(i+1)
    ax.plot(range(len(df_com_x[name])),df_com_x[name],color_list[i], alpha=0.3)

  ax.legend(legend_)
  ax.plot(range(len(df_com_x["mean"])),df_com_x["mean"],"r", linewidth=2)
  ax.fill_between(range(len(df_com_x["mean"])),
                  df_com_x["mean"] - df_com_x["std"],
                  df_com_x["mean"] + df_com_x["std"],
                  color='r', alpha=0.1)
  ax.set_title("Center of mass x")
  plt.gca().xaxis.set_major_formatter(mtick.PercentFormatter(xmax=42))

  st.pyplot(fig)

  fig, ax2 = plt.subplots(figsize=(10,3))
  color_list = ["c--", "b--", "y--", "m--", "g--"]
  legend_ = ["S1", "S2", "S3", "S4", "S5"]

  for i in range(5):
    name = "S" + str(i+1)
    ax2.plot(range(len(df_com_y[name])),df_com_y[name],color_list[i], alpha=0.3)

  ax2.legend(legend_)
  ax2.plot(range(len(df_com_y["mean"])),df_com_y["mean"],"r", linewidth=2)
  ax2.fill_between(range(len(df_com_y["mean"])),
                  df_com_y["mean"] - df_com_y["std"],
                  df_com_y["mean"] + df_com_y["std"],
                  color='r', alpha=0.1)
  ax2.set_title("Center of mass y")
  plt.gca().xaxis.set_major_formatter(mtick.PercentFormatter(xmax=42))

  fig, ax3 = plt.subplots(figsize=(10,5))
  color_list = ["c--", "b--", "y--", "m--", "g--"]
  legend_ = ["S1", "S2", "S3", "S4", "S5"]

  for i in range(5):
    name = "S" + str(i+1)
    ax3.scatter(df_com_x[name],df_com_y[name], alpha=0.3)

  ax3.legend(legend_)
  ax3.plot(df_com_x["mean"], df_com_y["mean"])
  ax3.set_title("Center of mass")
  st.pyplot(fig)

def duration_of_turns(dur_p_frame,index_turn):
  duration_list = []
  for i in range(5):
    dur_t = dur_p_frame * (index_turn[i][1] - index_turn[i][0])
    duration_list.append(dur_t)

  fig, ax = plt.subplots(figsize=(6,4))

  ax.bar(list(range(1,6)), duration_list)
  plt.show()

def plot_all(vid2, gender2, dur_p_frame, num_frames5):

  df, image_c, image_b = pose_est(vid2, num_frames5)

  #create_video_concat(image_c, image_b, num_frames5)

  # Plot Knee Angle

  angle_knee = angle_array_creator(df, "KNEE", "HIP", "ANKLE")

  index_knee = index_finder(angle_knee, num_frames5)

  angle_knee_df = create_df_angle(angle_knee, index_knee)

  angle_plot(index_knee, angle_knee_df, vid2, "Knee Angle")

  # Plot Hip Angle

  angle_hip = angle_array_creator(df, "HIP", "KNEE", "SHOULDER")

  angle_hip_df = create_df_angle(angle_hip, index_knee)

  angle_plot(index_knee, angle_hip_df, vid2, "Hip Angle")

  # Plot Ankle Angle

  angle_ankle = angle_array_creator(df, "ANKLE", "KNEE", "FOOT_INDEX")

  angle_ankle_df = create_df_angle(angle_ankle, index_knee)

  angle_plot(index_knee, angle_ankle_df, vid2, "Ankle Angle")

  #Plot Center of Mass

  center_of_mass_x, center_of_mass_y = center_of_mass(df, gender2)

  plot_center_of_mass(center_of_mass_x, center_of_mass_y, index_knee)

  # Plot durations

  duration_of_turns(dur_p_frame,index_knee);

# File path of the saved dictionary
file_path = "dictionary.pickle"

# Load the dictionary
with open(file_path, "rb") as f:
    dic_patient = pickle.load(f)

def main():
    st.title('Chair Stand Analysis')

    # Description
    st.write("""Chair Stand Analysis, also known as 5 Times Sit-to-Stand (5STS), is a functional assessment to evaluate lower extremity strength and functional mobility. 
    The test measures the time taken to stand up from a chair, walk a short distance, and sit back down for a certain number of repetitions. 
    It provides valuable information about a person's functional fitness and can be used in various healthcare settings for assessment and monitoring.
    """)

    # Sample Video
    st.subheader("Sample Video")
    st.video("sample_video.mp4")

    # User input for age, weight, and gender
    age = st.slider('Age', min_value=0, max_value=100, value=30)
    weight = st.slider('Weight (kg)', min_value=0.0, max_value=150.0, value=70.0)
    gender = st.selectbox('Gender', ['Male', 'Female'])

    # User input for video
    video_file = st.file_uploader('Upload Video', type=['mp4'])

    if st.button('Run Analysis'):
        if video_file is not None:
            # Save the uploaded video to a temporary location
            with open('temp_video.mp4', 'wb') as f:
                f.write(video_file.read())

            video= imageio.get_reader('temp_video.mp4',  'ffmpeg', size=(352,640))

            num_frames = video.count_frames()

            df, _, _ = pose_est(video, num_frames)

            angle_knee = angle_array_creator(df, "KNEE", "HIP", "ANKLE")
            
            index_knee = index_finder(angle_knee, num_frames)

            num_of_aframes = index_knee[4][1] - index_knee[0][0]

            angle_knee_df = create_df_angle(angle_knee, index_knee)

            angle_plot(index_knee, angle_knee_df, video, "Knee Angle")

            # Plot Hip Angle 

            angle_hip = angle_array_creator(df, "HIP", "KNEE", "SHOULDER")

            angle_hip_df = create_df_angle(angle_hip, index_knee)

            angle_plot(index_knee, angle_hip_df, video, "Hip Angle")

            dur_per_frame = video.get_meta_data()["duration"]/num_frames

            duration_of_turns(dur_per_frame,index_knee)

            st.pyplot()

    age_range = st.slider("Select age range", 0, 100, (0, 100))
    weight_range = st.slider("Select weight range", 0, 500, (0, 500))

    filtered_data = []
    for filename, combined_array in dic_patient.items():
        info = combined_array[0]
        age = info[0]
        weight = info[2]
        gender_info = info[1]
        
        if (age_range[0] <= age <= age_range[1] and
                weight_range[0] <= weight <= weight_range[1] and
                gender_info == gender):
            filtered_data.append(combined_array)

    # Resample the arrays to input number for the filtered data
    resampled_data = []
    for combined_array in filtered_data:
        info = combined_array[0]
        resampled_array = []
        for array in combined_array[1:]:
            resampled_array.append(np.interp(num_of_aframes, info[-1], array))
        resampled_data.append(resampled_array)

    if len(resampled_data) > 0:
        angle_knee_avg = np.mean([arr[0] for arr in resampled_data], axis=0)
        plt.plot(angle_knee)
        plt.plot(angle_knee_avg)
        plt.xlabel("Frames")
        plt.ylabel("Angle (degrees)")
        plt.title("Average Angle Knee Motions")
        st.pyplot()

    # Plot the average of angle_hip_motions for the filtered data
    if len(resampled_data) > 0:
        angle_hip_avg = np.mean([arr[1] for arr in resampled_data], axis=0)
        plt.plot(angle_hip)
        plt.plot(angle_hip_avg)
        plt.xlabel("Frames")
        plt.ylabel("Angle (degrees)")
        plt.title("Average Angle Hip Motions")
        st.pyplot()
    

# Run the main function
if __name__ == '__main__':
    main()